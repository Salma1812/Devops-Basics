SHELL SCRIPTING :

What is Shell Script? 
A shell script is a file containing a series of commands. The shell reads this file and carries 
out the commands as though they have been entered directly on the command line. 

Normally the shell scripts has the file extension .sh 

To create a shell script, you use a text editor. There are many, many text editors available for your Linux system,
both for the command line environment and the GUI environment. Here is a list of some common ones: 

1) vi or vim is the command line interface text editor. 
2) gedit is the GUI text editor. 

Following steps are required to write shell script: 

Step 1) Use any editor like vi or gedit to write shell script. 
        Syntax: vi << Script file name >> 
                Example: vi hello.sh //Start vi editor

Step 2) After writing shell script set execute permission for your script as follows ;
       Syntax: chmod<<permission>><<script filename>>
Examples: # chmod +x <<script filename>>
          # chmod 755 <<script filename>>
Note:
This will set read,write and execute(7)permission for owner,for group and other permissions are read and execute only(5).
 
Step 3) Execute your script as ;
        Syntax: bash script file name 
        sh <script_filename>
        ./<script_filename> 

Example for writing script: 

vi shub.sh // Start vi editor 
#!/bin/sh 
echo "Hello welcome to The DevOps Learning!"

Give the permissions as follows 
chmod +x shub.sh 

Run the hello.sh script file as follows. 
./shub.sh 

Output :
Hello welcome to The Devops Learning!

        First Shell Script :
                            Filename : salma.sh

#!/bin/bash 
#Purpose : To display the message. 
#Author: Salma . 
#Date: 1st December 2024. 
echo "Hello Welcome to the DevOps Learning" 

- The first line is called a shebang or a 'bang" line. It is nothing but the absolute path to the Bash interpreter. 
It consists of a number sign and an exclamation point character (#!), followed by the full path to the interpreter
such as /bin/bash/. If you do not specify an interpreter line, the default is usually the /bin/sh.

- In order to execute the shell script make sure that you have execute permission. Give execute permissions as follows. 
         #chmod +x shub.sh (OR) chmod 111 shub.sh 
There are different ways to run a shell script: 
1) bash shub.sh 
2) sh shub.sh 
3) ./shub.sh 
4) . shub.sh

Case Sensitivity :
As you know Linux is case sensitive, file names, variables, and arrays used in shell scripts are also case sensitive. 

Check out this Example: 
#!/bin/bash Page 
string1=10 
String1=20
echo "The value ue of string1 is $string1 "
echo "The value of String1 is $String1 "

File Naming conventions: 

1)A file name can be a maximum of 255 characters 
2)The name may contain alphabets, digits, dots and underscores 
3)System commands or Linux reserve words can not be used for file names. 
4)File system is case sensitive. 
5)Some of valid filenames in Linux are :
shubham.txt 
Shubham.sh 
Shubham_08112013.sh 
Shubham05.sh 

COMMENTS :
* Comments are used to escape from the code. 
* This part of the code will be ignored by the program interpreter. 
* Adding comments make things easy for the programmer, while editing the code in future. 
* Single line comments can be do using # 
* Multilane comments can be using HERE DOCUMENT feature as follows ;
<<COMMENT1
your comment 1 
comment 2 
blah 
COMMENT1
File name: comments.sh 
#!/bin/bash 
# This is a basic shell script by Salma.
echo "Hello, Welcome to the Devops Learning!"  #It will display the message

File name: multiline_comments.sh 
# ! /bin/bash :wq 
echo "We are commenting multiple tine" 
<<COMMENT1
I am commenting here multiple lines using HERE DOCUMENT feature 
COMMENTI 
echo "Multi line comment done" 

Variables 
There are two types of variables in Linux shell script. 
Those are ;
1.System variables 
2.User defined variables (UDV). 

Naming conventions for variables:  

Variable name must begin with alphanumeric character or underscore character (_).

By convention, environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..) 
are capitalized. All other variable names should be lower case. 
* Variable names are case-sensitive;this convention avoids accidentally overriding environmental & internal variables.

System defined Variables:

Created and maintained by Linux bash shell itself. This type of variable is defined in CAPITAL LETTERS: 
There are many shell inbuilt variables which are used for administration and writing shell scripts. 
To see all system variables, type the following command at a console / terminal: 
:-env or printenv 
Use echo command to display varaible values as follows;

Filename : System_varaible.sh
#!/bin/bash
echo 'BASH='$BASH 
echo '$BASH_VERSION =' $BASH_VERSION 
echo 'HOSTNAME=' $HOSTNAME
echo 'TERM=' $TERM 
echo 'SHELL=' $SHELL
echo 'HISTSIZE=' $HISTSIZE 
echo 'SSH_CLIENT=' $SSH_CLIENT 
echo ' QTDIR= ' $QTDIR 
echo ' QTINC= ' $QTINC 
echo ' SSH_TTY=' $SSH_TTY 
echo ' JRE_HOME=' $JRE_HOME 
echo ' USER=' $USER 
echo ' LS_COLORS=' $LS_COLORS 
echo ' TMOUT= ' $TMOUT 
echo '$MAIL=' $MAIL 
echo 'PATH=' $PATH 
echo 'PWD=' $PWD
echo 'JAVA_HOME=' $JAVA_HOME 
echo 'LANG=' $LANG 
echo 'ASKPASS=' $ASKPASS
echo 'HISTCONTROL=' $HISTCONTROL 
echo 'SHLVL=' $SHLVL 
echo 'HOME=' $HOME 
echo 'LOGNAME=' $LOGNAME 
echo 'TLIB=' $QTLIB  
echo 'CVS_RSH=' $CVS_RSH 
echo 'SSH_CONNECTION=' $SSH_CONNECTION 
echo 'LESSOPEN=' $LESSOPEN 
echo 'G_BROKEN_FILENAMES=' $G_BROKEN_FILENAMES
echo 'OLDPWD= ' $OLDPWD 

User defined Variables :
Created and maintained by user. This type of variable defined may use any valid variable name but it is good
practice to avoid all uppercase names as many are used by the shell. 
File : user_defined_variables .sh 

#! /bin/bash 
trainingCourse=DevOps 
echo 'Displaying the user defined the varibale (trainingCourse) value is :' $trainingCourse

COMMANDLINE ARGUMENTS :
During shell script execution, values passing through command prompt is called as command line arguments. 

#Example, while running a shell script, we can specify the command line arguments as "sh scriptfile.sh argl arg2 arg3"

While using command line arguments follow the below important points. 

* We can specify n number of arguments, there is no limitation. 
* Each argument is separated by space. 

Following example describes the command line arguments. 
File name: commandlineargs.sh 
                #!/bin/bash 
                #Number of arguments on the command line. 
                echo '$#:' $#
                #Process number Of the current process . 
                echo ' $$:' $$
                #Display the third argument on the command line, from left to right.
                echo '$3:' $3
                #Display the name of the current shell or program. 
                echo ' $0:' $0 
                #Display all the arguments on the command line using * symbol. 
                echo ' $*:' $@
                Display all She arguments on the command tine using @ symbol. 
 
Run : sh commandlineargs.sh Github Bluemix UCD Jenkins Java Linux WebSphereApplicationServer 
Output: 
$# 4
$$ 16955 
$3: WebSphereApplicationServer 
$0: commandlineargs. sh 
$*:Java Linux WebSphereApplicationServer Android 
$@: Java Linux WebSphereApplicationServer Android 

Difference between and $@ : The collection of arguments in $* is treated as one text string, whereas the collection of
arguments in $@ is treated as seperate strings.

STRINGS :
Strings are scalar ana there is no limit to the size of a string. 
Any characters, symbols, or words can be used to make up your String. 

How to define a string? 
We use single or double quotations to define a string. 
"Double Quotes"—Anything enclose in double quotes removed meaning of that characters (except \ and $). 
'Single quotes'—Enclosed in single quotes remains unchanged. 
`Back quote`—To execute command 
Example: 
FileName: quotes.sh 
#! /bin/bash 
single= 'Single quoted' 
double= "Double quoted"
echo $single
echo $double
     #save this script as quotes.sh,  chmod 755 quotes.sh, ./quotes.sh

STRING FORMATTING :- 
             Character Description ;
                        -n Do not output the trailing new line. 
                        -e Enable interpretation of the following backslash escaped 
            Characters in the stringS: 
                \a alert (bell) 
                \b backspace 
                \c suppress trailing new line 
                \n new line 
                \r carriage return 
                \t horizontal tab 
                \\ backslash 
User Interaction using read command :

In some cases the script needs to interact with the user and accept inputs. 
In shell scripts we use the read statement to take input from the user. 
 
read : read command is used to get the input from the user (Making scripts interactive). 
Example: File Name: readName. sh 
                #! /bin/bash 
                #Author: Shubham Londhe . 
                #Date: 31st December 2@24. 
                echo "Please enter your name:" 
                read userName 
                echo "The name you entered is $userName" 
Run the above script as follows: 
# ./readName.sh 
 OUTPUT:
          Please enter your name:  Salma  
          The name you entered is Salma   

CONTROL COMMANDs:
        a) if control statement:
                                Syntax: 
                                        if condition 
                                        then 
                                        Display commands list if condition is true. 
                                        else
                                        Display commands list if condition is false. 
                                        fi
 
Note: if & then must be separated, either with a <<new line>> or a semicolon(;), termination of the if statement is fi. 
Example. 
Following example demonstrates the find biggest number. 
File Name: FindBiggestNumber.sh 
                if[$# -ne 3 ]
                then 
                echo "$0: numberl number2 number3 are not given" >&2  
                exit 1
                fi

if [ $n1 —gt $n2] && [$n1 —gt $n3] 
then 
echo "$nl is the biggest t number" 
el-if [$n2 -gt $nl ] &&[ $n2 -gt $n3 ]
then 
echo "$n2 is the biggest t number" 
el-if [ $n3 —gt $n1 ] && [ $n3 —gt $n2 ]
then 
echo "$n3 is the biggest number" 
el-if [$1 -eq $2 ] && [ $1 -eq $3] && [ $2 -eq $3]
then
echo "All the three numbers are equal"
else
echo " I can not figure out which number is bigger"
fi
        Run : sh findbiggerNumber.sh 1 2 3
        OUTPUT : 3 is the biggest number

EXAMPLE-2 :   FileExists.shPage 

                #!/bin/bash 
                echo —e "Enter the name of the file : \c"
                read file_name 
                if [ —f $file_name ]
                then 
                if [ -w $file_name ]
                then 
                echo "Type something, To Quit type Ctrl +d" 
                cat >> $file_name 
                else
                echo "The file do not have write permissions" 
                fi
                echo "$file_name not exists" 
                fi

FOR LOOP : Syntax :
                        for (condition)
                        do
                        execute here all commands or script until the condition is not satisfied( and repeat all 
                        statements between do and done).
                        done

FileName : for_loop.sh
                echo " can you see the following:"
                for((i=1; i<=5;i++)
                do
                echo $i
                echo ""
                done
OUTPUT : can you see the folowing:
                1
                2
                3
                4
                5                                                       i=5
WHILE LOOP:        Syntax : while [condition]                EXAMPLE :  while test $i !=0
                            do                                          do                        OUTPUT :  5
                            command1                                    echo "$i"                           4
                            command2                                    echo " "                            3
                            command3                                    i=`expr $i-1`                       2
                            ---------------   ---------                                                     1
                            done                                                                                
SWITCH CASE : 
The case statement is good alte to multilevel if-then-else- fi statement. It enables you to match several
values against one variable. It's easier to read and write. 
                Syntax: 
                        case $variable—name in 
                        pattern1) command
                        ...........           
                        command ;; 
                        pattern2) command 
                        ..........
                        Command ; ; 
                        patternN) command 
                        ..........
                        *) command
                        ..........
                         command ;;
                        esac
EXAMPLE : Filename: switch_case. sh 
                #!/bin/sh 
                echo "Enter a number between 1 and 10. "
                read NUM 
                case $NUM in 
                1) echo "You entered is one" ;;
                2) echo "You entered is two" ;;
                3) echo "You entered is three" ;;
                4) echo "You entered is four" ;;
                5) echo "You entered is five" ;;
                6) echo "You entered is six" ;;
                7) echo "You entered is seven" ;; 
                8) echo "You entered is eight" ;;
                9) echo "You entered is nine" ;;
                10) echo "You entered is ten" ;;
                *) echo "INVALID NUMBER !"
                esac















































































